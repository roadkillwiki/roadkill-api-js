/**
 * Roadkill API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Markdown service.
* @module api/MarkdownApi
* @version 3.0
*/
export default class MarkdownApi {

    /**
    * Constructs a new MarkdownApi. 
    * @alias module:api/MarkdownApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the markdownConvertToHtml operation.
     * @callback module:api/MarkdownApi~markdownConvertToHtmlCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} body 
     * @param {module:api/MarkdownApi~markdownConvertToHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    markdownConvertToHtml(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling markdownConvertToHtml");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/Markdown/ConvertToHtml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markdownUpdateLinksToPage operation.
     * @callback module:api/MarkdownApi~markdownUpdateLinksToPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.oldTitle 
     * @param {String} opts.newTitle 
     * @param {module:api/MarkdownApi~markdownUpdateLinksToPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markdownUpdateLinksToPage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oldTitle': opts['oldTitle'],
        'newTitle': opts['newTitle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/Markdown/UpdateLinksToPage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
