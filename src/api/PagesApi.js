/**
 * Roadkill API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageRequest from '../model/PageRequest';
import PageResponse from '../model/PageResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* Pages service.
* @module api/PagesApi
* @version 3.0
*/
export default class PagesApi {

    /**
    * Constructs a new PagesApi. 
    * @alias module:api/PagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pagesAdd operation.
     * @callback module:api/PagesApi~pagesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a page to the database using the provided meta information. This will only add the meta information not the page text, use PageVersions to add text for a page.
     * @param {module:model/PageRequest} pageRequest The page information to add.
     * @param {module:api/PagesApi~pagesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponse}
     */
    pagesAdd(pageRequest, callback) {
      let postBody = pageRequest;
      // verify the required parameter 'pageRequest' is set
      if (pageRequest === undefined || pageRequest === null) {
        throw new Error("Missing the required parameter 'pageRequest' when calling pagesAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResponse;
      return this.apiClient.callApi(
        '/v3/Pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesAllPages operation.
     * @callback module:api/PagesApi~pagesAllPagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all pages in the Roadkill database.
     * @param {module:api/PagesApi~pagesAllPagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageResponse>}
     */
    pagesAllPages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageResponse];
      return this.apiClient.callApi(
        '/v3/Pages/AllPages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesAllPagesCreatedBy operation.
     * @callback module:api/PagesApi~pagesAllPagesCreatedByCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all pages created by a particular user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username (typically an email address) of the user that created             the the pages.
     * @param {module:api/PagesApi~pagesAllPagesCreatedByCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageResponse>}
     */
    pagesAllPagesCreatedBy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageResponse];
      return this.apiClient.callApi(
        '/v3/Pages/AllPagesCreatedBy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesDelete operation.
     * @callback module:api/PagesApi~pagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing page from the database. This is an administrator-only action.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageId The id of the page to remove.
     * @param {module:api/PagesApi~pagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pagesDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageId': opts['pageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/Pages', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesFindByTitle operation.
     * @callback module:api/PagesApi~pagesFindByTitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds the first page matching the given page title.
     * @param {Object} opts Optional parameters
     * @param {String} opts.title The title of the page to search for (case-insensitive).
     * @param {module:api/PagesApi~pagesFindByTitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponse}
     */
    pagesFindByTitle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponse;
      return this.apiClient.callApi(
        '/v3/Pages/FindByTitle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesFindHomePage operation.
     * @callback module:api/PagesApi~pagesFindHomePageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds the first page in the database with the \"homepage\" tag.
     * @param {module:api/PagesApi~pagesFindHomePageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponse}
     */
    pagesFindHomePage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponse;
      return this.apiClient.callApi(
        '/v3/Pages/FindHomePage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesGet operation.
     * @callback module:api/PagesApi~pagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single page by its ID.
     * @param {Number} id The unique ID of the page to retrieve.
     * @param {module:api/PagesApi~pagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponse}
     */
    pagesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponse;
      return this.apiClient.callApi(
        '/v3/Pages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagesUpdate operation.
     * @callback module:api/PagesApi~pagesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing page in the database.
     * @param {module:model/PageRequest} pageRequest The page details to update, which should include the page id.
     * @param {module:api/PagesApi~pagesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponse}
     */
    pagesUpdate(pageRequest, callback) {
      let postBody = pageRequest;
      // verify the required parameter 'pageRequest' is set
      if (pageRequest === undefined || pageRequest === null) {
        throw new Error("Missing the required parameter 'pageRequest' when calling pagesUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageResponse;
      return this.apiClient.callApi(
        '/v3/Pages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
