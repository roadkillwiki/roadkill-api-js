/**
 * Roadkill API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageVersionRequest from '../model/PageVersionRequest';
import PageVersionResponse from '../model/PageVersionResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* PageVersions service.
* @module api/PageVersionsApi
* @version 3.0
*/
export default class PageVersionsApi {

    /**
    * Constructs a new PageVersionsApi. 
    * @alias module:api/PageVersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pageVersionsAdd operation.
     * @callback module:api/PageVersionsApi~pageVersionsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageId 
     * @param {String} opts.text 
     * @param {String} opts.author 
     * @param {Date} opts.dateTime 
     * @param {module:api/PageVersionsApi~pageVersionsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageVersionResponse}
     */
    pageVersionsAdd(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageId': opts['pageId'],
        'text': opts['text'],
        'author': opts['author'],
        'dateTime': opts['dateTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageVersionResponse;
      return this.apiClient.callApi(
        '/v3/PageVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsAllVersions operation.
     * @callback module:api/PageVersionsApi~pageVersionsAllVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageVersionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PageVersionsApi~pageVersionsAllVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageVersionResponse>}
     */
    pageVersionsAllVersions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageVersionResponse];
      return this.apiClient.callApi(
        '/v3/PageVersions/AllVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsDelete operation.
     * @callback module:api/PageVersionsApi~pageVersionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:api/PageVersionsApi~pageVersionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pageVersionsDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/PageVersions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsFindPageVersionsByAuthor operation.
     * @callback module:api/PageVersionsApi~pageVersionsFindPageVersionsByAuthorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageVersionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {module:api/PageVersionsApi~pageVersionsFindPageVersionsByAuthorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageVersionResponse>}
     */
    pageVersionsFindPageVersionsByAuthor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageVersionResponse];
      return this.apiClient.callApi(
        '/v3/PageVersions/FindPageVersionsByAuthor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsFindPageVersionsByPageId operation.
     * @callback module:api/PageVersionsApi~pageVersionsFindPageVersionsByPageIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageVersionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageId 
     * @param {module:api/PageVersionsApi~pageVersionsFindPageVersionsByPageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageVersionResponse>}
     */
    pageVersionsFindPageVersionsByPageId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageId': opts['pageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageVersionResponse];
      return this.apiClient.callApi(
        '/v3/PageVersions/FindPageVersionsByPageId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsGet operation.
     * @callback module:api/PageVersionsApi~pageVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PageVersionsApi~pageVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageVersionResponse}
     */
    pageVersionsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pageVersionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageVersionResponse;
      return this.apiClient.callApi(
        '/v3/PageVersions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsGetLatestVersion operation.
     * @callback module:api/PageVersionsApi~pageVersionsGetLatestVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageId 
     * @param {module:api/PageVersionsApi~pageVersionsGetLatestVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageVersionResponse}
     */
    pageVersionsGetLatestVersion(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageId': opts['pageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageVersionResponse;
      return this.apiClient.callApi(
        '/v3/PageVersions/GetLatestVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageVersionsUpdate operation.
     * @callback module:api/PageVersionsApi~pageVersionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PageVersionRequest} pageVersionRequest 
     * @param {module:api/PageVersionsApi~pageVersionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pageVersionsUpdate(pageVersionRequest, callback) {
      let postBody = pageVersionRequest;
      // verify the required parameter 'pageVersionRequest' is set
      if (pageVersionRequest === undefined || pageVersionRequest === null) {
        throw new Error("Missing the required parameter 'pageVersionRequest' when calling pageVersionsUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/PageVersions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
