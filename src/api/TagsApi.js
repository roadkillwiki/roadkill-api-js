/**
 * Roadkill API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageResponse from '../model/PageResponse';
import TagResponse from '../model/TagResponse';

/**
* Tags service.
* @module api/TagsApi
* @version 3.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsAllTags operation.
     * @callback module:api/TagsApi~tagsAllTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TagsApi~tagsAllTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagResponse>}
     */
    tagsAllTags(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagResponse];
      return this.apiClient.callApi(
        '/v3/Tags/AllTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsFindPageWithTag operation.
     * @callback module:api/TagsApi~tagsFindPageWithTagCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.tag 
     * @param {module:api/TagsApi~tagsFindPageWithTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PageResponse>}
     */
    tagsFindPageWithTag(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageResponse];
      return this.apiClient.callApi(
        '/v3/Tags/FindPageWithTag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsRename operation.
     * @callback module:api/TagsApi~tagsRenameCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.oldTagName 
     * @param {String} opts.newTagName 
     * @param {module:api/TagsApi~tagsRenameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    tagsRename(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oldTagName': opts['oldTagName'],
        'newTagName': opts['newTagName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/Tags/Rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
